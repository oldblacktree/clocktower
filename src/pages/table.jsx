import { useState, useMemo } from "react";

export default function Table({ playerCount, playersRoles, setPlayersRoles }) {
  const [selectedPlayer, setSelectedPlayer] = useState(null);
  const [showRolePicker, setShowRolePicker] = useState(false);

  // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –æ–≤–∞–ª—É
  const radiusX = 160;
  const radiusY = 250;
  const circlePositions = Array.from({ length: playerCount }).map((_, i) => {
    const angle = (2 * Math.PI * i) / playerCount - Math.PI / 2;
    const x = Math.cos(angle) * radiusX;
    const y = Math.sin(angle) * radiusY;
    return { x, y };
  });

  // —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
  const availableRoles = useMemo(
    () => playersRoles.filter((r) => !r.playerNumber),
    [playersRoles]
  );

  // –Ω–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
  const getRoleForPlayer = (num) =>
    playersRoles.find((r) => r.playerNumber === num);

  // –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–≥—Ä–æ–∫–∞
  const openRolePicker = (index) => {
    setSelectedPlayer(index + 1);
    setShowRolePicker(true);
  };

  // –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏
  const handleSelectRole = (role) => {
    setPlayersRoles((prev) =>
      prev.map((r) =>
        r.id === role.id ? { ...r, playerNumber: selectedPlayer } : r
      )
    );
    setShowRolePicker(false);
  };

  // —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
  const resetAssignments = () =>
    setPlayersRoles((prev) => prev.map((r) => ({ ...r, playerNumber: null })));

  return (
    <div className="flex flex-col items-center justify-center h-full relative">
      <h1 className="text-xl font-bold mb-4">–†–∞—Å—Å–∞–¥–∫–∞ –∏–≥—Ä–æ–∫–æ–≤</h1>

      {/* –ò–≥—Ä–æ–≤–æ–π –æ–≤–∞–ª */}
      <div className="relative w-[320px] h-[300px] flex items-center justify-center">
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–µ–¥—É—â–∏–π */}
        <div className="absolute w-16 h-16 bg-yellow-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg">
          üé≠
        </div>

        {/* –ò–≥—Ä–æ–∫–∏ */}
        {circlePositions.map((pos, i) => {
          const playerNum = i + 1;
          const role = getRoleForPlayer(playerNum);

          return (
            <div
              key={playerNum}
              onClick={() => openRolePicker(i)}
              className={`absolute w-16 h-16 rounded-full border-4 cursor-pointer flex items-center justify-center transition
                ${
                  role
                    ? "border-green-400 bg-gray-800"
                    : "border-gray-600 bg-gray-700 hover:border-yellow-400"
                }`}
              style={{
                left: `calc(50% + ${pos.x}px - 2rem)`,
                top: `calc(50% + ${pos.y}px - 2rem)`,
              }}
            >
              {role ? (
                <img
                  src={`${import.meta.env.BASE_URL}/assets/roles/${
                    role.id
                  }.png`}
                  alt={role.name}
                  className="w-full h-full rounded-full object-cover"
                />
              ) : (
                <span className="text-white text-xs text-center leading-tight">
                  –ò–≥—Ä–æ–∫ {playerNum}
                </span>
              )}
            </div>
          );
        })}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
      <button
        onClick={resetAssignments}
        className="mt-6 px-4 py-2 bg-red-600 text-white rounded-lg"
      >
        –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª–∏
      </button>

      {/* –ú–æ–¥–∞–ª–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ */}
      {showRolePicker && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
          <div className="bg-gray-900 p-4 rounded-xl max-w-sm w-full text-center">
            <h2 className="text-lg font-semibold text-white mb-3">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {selectedPlayer}
            </h2>

            {availableRoles.length === 0 ? (
              <p className="text-gray-400 mb-3">–í—Å–µ —Ä–æ–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</p>
            ) : (
              <div className="grid grid-cols-4 gap-3 max-h-[60vh] overflow-y-auto">
                {availableRoles.map((role) => (
                  <div
                    key={role.id}
                    onClick={() => handleSelectRole(role)}
                    className="w-16 h-16 rounded-full overflow-hidden border-2 border-transparent hover:border-yellow-400 transition cursor-pointer bg-[#23343b]"
                  >
                    <img
                      src={`${import.meta.env.BASE_URL}/assets/roles/${
                        role.id
                      }.png`}
                      alt={role.name}
                      className="w-full h-full object-cover"
                    />
                  </div>
                ))}
              </div>
            )}

            <button
              onClick={() => setShowRolePicker(false)}
              className="mt-4 px-4 py-2 bg-gray-700 text-white rounded-lg"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
